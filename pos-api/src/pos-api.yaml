openapi: "3.0.0"
info:
  version: 1.0.0
  title: Products
  license:
    name: MIT

paths:
  /product:
    get:
      summary: List all products
      operationId: listProducts
      tags:
        - products
      responses:
        '200':
          description: A paged array of products
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /product/{productId}:
    get:
      summary: Info for a specific product
      operationId: showProductById
      tags:
        - product
      parameters:
        - name: productId
          in: path
          required: true
          description: The id of the product to retrieve
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /item:
    get:
      summary: cart items
      description: get cart's items
      operationId: showCartItems
      tags:
        - item
      responses:
        '200':
          description: An array of items
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"

        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      description: delete all items
      operationId: deleteAllItems
      tags:
        - item
      responses:
        '200':
          description: delete
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"

  /item/{productId}:
    post:
      summary: add item
      description: add new item
      operationId: addItem
      tags:
        - item
      parameters:
        - name: productId
          in: path
          description: The ID of product.
          required: true
          schema:
            type: integer
            example: 12131
      requestBody:
        description: The item
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemFiled"
        required: true
      responses:
        200:
          description: "add successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'


    put:
      description: update item quantity
      operationId: updateItem
      tags:
        - item
      parameters:
        - name: productId
          in: path
          description: The ID of product.
          required: true
          schema:
            type: integer
            example: 12131
      requestBody:
        description: item that need to update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemFiled"
        required: true

      responses:
        200:
          description: "update successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'

    delete:
      summary: delete item
      description: delete the item whose id is the product id
      operationId: deleteItem
      tags:
        - item
      parameters:
        - name: productId
          in: path
          description: the id of product to be deleted
          required: true
          schema:
            type: integer
            example: 123124
      responses:
        200:
          description: "respond for delete request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'

  /item/toOrder:
    post:
      tags:
        - item
      operationId: convertCartToOrder
      requestBody:
        description: The item
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
      responses:
        200:
          description: The order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /order/{orderId}:
    get:
      description: get order's information by orderID
      summary: get order by id
      operationId: getOrder
      tags:
        - order
      parameters:
        - name: orderId
          in: path
          required: true
          description: the id of order
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"

        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /order:
    post:
      description: create a new order
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
      responses:
        '200':
          description: create successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"

  /bill:
    post:
      description: create new bill
      operationId: createBill
      tags:
        - bill
      requestBody:
        description: item that need to update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
        required: true
      responses:
        '200':
          description: create successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"


  /delivery/{deliveryId}:
    get:
      description: get the information of delivery
      operationId: getDelivery
      tags:
        - Delivery
      parameters:
        - name: deliveryId
          required: true
          in: path
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: get
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Delivery"

  /delivery:
    post:
      description: create a delivery
      operationId: createDelivery
      tags:
        - Delivery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
      responses:
        '200':
          description: create successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"

components:
  schemas:

    Product:
      type: object
      required:
        - id
        - name
        - price
        - image
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: number
        image:
          type: string

    Products:
      type: array
      items:
        $ref: "#/components/schemas/Product"

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string


    ItemFiled:
      description: Editable fields of Item
      type: object
      properties:
        quantity:
          type: integer

    Item:
      required:
        - product
        - quantity
      properties:
        product:
          $ref: "#/components/schemas/Product"
        quantity:
          type: integer

    Carts:
      type: array
      items:
        $ref: "#/components/schema/Cart"

    #    CartItem:
    #      required:
    #        - id
    #        - amount
    #        - product
    #      type: object
    #      properties:
    #        id:
    #          type: integer
    #          format: int64
    #        amount:
    #          type: integer
    #          format: int32
    #        product:
    #          $ref: "#/components/schema/Product"

    Cart:
      type: object
      required:
        - id
        - items
      properties:
        id:
          type: integer
          format: int64
        items:
          type: array
          items:
            $ref: "#/components/schemas/Item"

    Message:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
        message:
          type: string

    Order:
      type: object
      required:
        - id
        - cart
      properties:
        id:
          type: integer
          format: int64
        cart:
          $ref: "#/components/schemas/Cart"

    Delivery:
      type: object
      required:
        - id
        - information
      properties:
        id:
          type: integer
          format: int64
        cart:
          type: integer

